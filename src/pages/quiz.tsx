import { useState } from "react";
import { Card } from "@heroui/card";
import { Button } from "@heroui/button";
import { RadioGroup } from "@heroui/radio";
import { Icon } from "@iconify/react";

import DefaultLayout from "@/layouts/default";

const questions = [
  {
    question:
      "M·ª•c ti√™u cao nh·∫•t c·ªßa n·ªÅn kinh t·∫ø th·ªã tr∆∞·ªùng ƒë·ªãnh h∆∞·ªõng x√£ h·ªôi ch·ªß nghƒ©a ·ªü Vi·ªát Nam l√† g√¨?",
    options: [
      "TƒÉng GDP",
      "D√¢n gi√†u, n∆∞·ªõc m·∫°nh, d√¢n ch·ªß, c√¥ng b·∫±ng, vƒÉn minh",
      "Ph√°t tri·ªÉn c√¥ng nghi·ªáp",
      "TƒÉng xu·∫•t kh·∫©u",
    ],
    correct: 1,
  },
  {
    question:
      "Th√†nh ph·∫ßn kinh t·∫ø n√†o gi·ªØ vai tr√≤ ch·ªß ƒë·∫°o trong n·ªÅn kinh t·∫ø Vi·ªát Nam?",
    options: [
      "Kinh t·∫ø t∆∞ nh√¢n",
      "Kinh t·∫ø n∆∞·ªõc ngo√†i",
      "Kinh t·∫ø nh√† n∆∞·ªõc",
      "Kinh t·∫ø t·∫≠p th·ªÉ",
    ],
    correct: 2,
  },
  {
    question: "L·ª£i √≠ch kinh t·∫ø ph·∫£n √°nh ƒëi·ªÅu g√¨?",
    options: [
      "M·ª•c ƒë√≠ch v√† ƒë·ªông c∆° c·ªßa c√°c ch·ªß th·ªÉ trong s·∫£n xu·∫•t x√£ h·ªôi",
      "Ch·ªâ ph·∫£n √°nh l·ª£i nhu·∫≠n doanh nghi·ªáp",
      "Ch·ªâ ph·∫£n √°nh thu nh·∫≠p ng∆∞·ªùi lao ƒë·ªông",
      "Kh√¥ng ph·∫£n √°nh ƒëi·ªÅu g√¨",
    ],
    correct: 0,
  },
];

const Quiz = () => {
  const [current, setCurrent] = useState(0);
  const [selected, setSelected] = useState<number | null>(null);
  const [answered, setAnswered] = useState(false);
  const [score, setScore] = useState(0);
  const [showResult, setShowResult] = useState(false);

  const handleAnswer = () => {
    if (selected === null) return;
    setAnswered(true);
    if (selected === questions[current].correct) {
      setScore((prev) => prev + 1);
    }
  };

  const handleNext = () => {
    if (current < questions.length - 1) {
      setCurrent((prev) => prev + 1);
      setSelected(null);
      setAnswered(false);
    } else {
      setShowResult(true);
    }
  };

  const handleReset = () => {
    setCurrent(0);
    setSelected(null);
    setAnswered(false);
    setShowResult(false);
    setScore(0);
  };

  return (
    <DefaultLayout>
      <main className="container mx-auto px-4 py-12">
        <div className="max-w-3xl mx-auto">
          <h1 className="text-4xl font-bold text-center mb-10 bg-gradient-to-r from-primary to-primary-glow bg-clip-text text-transparent animate-fade-in-up">
            Ki·ªÉm tra ki·∫øn th·ª©c
          </h1>

          {/* --- Tr·∫°ng th√°i c√¢u h·ªèi --- */}
          {!showResult ? (
            <Card className="p-8 border border-primary/20 animate-scale-in shadow-md">
              {/* --- Header progress --- */}
              <div className="mb-6">
                <div className="flex justify-between text-sm mb-3">
                  <span className="text-muted-foreground">
                    C√¢u h·ªèi {current + 1}/{questions.length}
                  </span>
                  <span className="text-primary font-medium">
                    ƒêi·ªÉm: {score}
                  </span>
                </div>
                <div className="w-full h-2 bg-secondary rounded-full">
                  <div
                    className="h-2 bg-gradient-to-r from-primary to-primary-glow rounded-full transition-all duration-300"
                    style={{
                      width: `${((current + 1) / questions.length) * 100}%`,
                    }}
                  />
                </div>
              </div>

              {/* --- C√¢u h·ªèi --- */}
              <h2 className="text-xl font-semibold mb-6 text-foreground">
                {questions[current].question}
              </h2>

              {/* --- L·ª±a ch·ªçn --- */}
              <RadioGroup
                value={selected?.toString()}
                onValueChange={(value) =>
                  !answered && setSelected(parseInt(value))
                }
              >
                <div className="space-y-3">
                  {questions[current].options.map((option, index) => {
                    const isCorrect =
                      answered && index === questions[current].correct;
                    const isWrong =
                      answered &&
                      selected === index &&
                      index !== questions[current].correct;

                    return (
                      <div
                        key={index}
                        className={`flex items-center gap-3 p-4 rounded-lg border-2 transition-all duration-300 ${
                          isCorrect
                            ? "border-green-500 bg-green-50 dark:bg-green-950"
                            : isWrong
                              ? "border-red-500 bg-red-50 dark:bg-red-950"
                              : selected === index
                                ? "border-primary bg-primary/5"
                                : "border-border hover:border-primary/50"
                        }`}
                      >
                        <input
                          checked={selected === index}
                          className="accent-primary h-4 w-4"
                          disabled={answered}
                          id={`opt-${index}`}
                          name="option"
                          type="radio"
                          onChange={() => setSelected(index)}
                        />
                        <label
                          className="flex-1 cursor-pointer select-none"
                          htmlFor={`opt-${index}`}
                        >
                          {option}
                        </label>
                        {isCorrect && (
                          <Icon
                            className="text-green-600 w-5 h-5"
                            icon="lucide:check-circle"
                          />
                        )}
                        {isWrong && (
                          <Icon
                            className="text-red-600 w-5 h-5"
                            icon="lucide:x-circle"
                          />
                        )}
                      </div>
                    );
                  })}
                </div>
              </RadioGroup>

              {/* --- N√∫t ƒëi·ªÅu khi·ªÉn --- */}
              <div className="flex mt-8">
                {!answered ? (
                  <Button
                    fullWidth
                    className="bg-gradient-to-r from-primary to-primary-200 text-background hover:scale-[1.03] transition-all duration-300"
                    color="primary"
                    disabled={selected === null}
                    variant="solid"
                    onPress={handleAnswer}
                  >
                    Tr·∫£ l·ªùi
                  </Button>
                ) : (
                  <Button
                    fullWidth
                    className="bg-gradient-to-r from-secondary to-secondary/70 text-background hover:scale-[1.03] transition-all duration-300"
                    color="secondary"
                    variant="solid"
                    onPress={handleNext}
                  >
                    {current < questions.length - 1
                      ? "C√¢u ti·∫øp theo"
                      : "Xem k·∫øt qu·∫£"}
                  </Button>
                )}
              </div>
            </Card>
          ) : (
            /* --- K·∫øt qu·∫£ --- */
            <Card className="p-8 text-center border border-primary/20 shadow-lg animate-scale-in">
              <div
                className={`w-24 h-24 mx-auto rounded-full flex items-center justify-center mb-6 ${
                  score >= questions.length * 0.7
                    ? "bg-green-100 dark:bg-green-950"
                    : "bg-orange-100 dark:bg-orange-950"
                }`}
              >
                <span className="text-4xl font-bold text-foreground">
                  {Math.round((score / questions.length) * 100)}%
                </span>
              </div>

              <h2 className="text-3xl font-semibold text-foreground mb-2">
                K·∫øt qu·∫£ ki·ªÉm tra
              </h2>
              <p className="text-muted-foreground mb-4">
                B·∫°n tr·∫£ l·ªùi ƒë√∫ng {score}/{questions.length} c√¢u.
              </p>

              {score >= questions.length * 0.7 ? (
                <p className="text-green-600 dark:text-green-400 mb-6">
                  üéâ Xu·∫•t s·∫Øc! B·∫°n ƒë√£ n·∫Øm v·ªØng ki·∫øn th·ª©c.
                </p>
              ) : (
                <p className="text-orange-600 dark:text-orange-400 mb-6">
                  ‚ö° H√£y xem l·∫°i t√†i li·ªáu v√† th·ª≠ l·∫°i nh√©!
                </p>
              )}

              <Button
                className="bg-gradient-to-r from-primary to-primary-glow text-white hover:scale-[1.05] transition-all duration-300"
                color="primary"
                variant="solid"
                onPress={handleReset}
              >
                L√†m l·∫°i
              </Button>
            </Card>
          )}
        </div>
      </main>
    </DefaultLayout>
  );
};

export default Quiz;
